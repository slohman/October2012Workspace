package com.yctc.alpaware;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.FileChannel;




import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Environment;

import android.widget.Toast;


import com.googlecode.tesseract.android.TessBaseAPI;

import com.jabistudio.androidjhlabs.filter.DespeckleFilter;

import com.jabistudio.androidjhlabs.filter.ReduceNoiseFilter;
import com.jabistudio.androidjhlabs.filter.SharpenFilter;

import com.jabistudio.androidjhlabs.filter.util.AndroidUtils;


public class utilities extends Activity{
	
	
	
	
	
	


	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
       
    }
        
	
	Context ctx = this;
	
	String response;
	File sd = new File(Environment.getExternalStorageDirectory().toString() + "/PocketCalDatabases/");
	File DataDir = new File(Environment.getDataDirectory().toString() + "/data/com.yctc.alpaware/databases/");
	
	


	public String saveDB(String dbase, Context ctx) throws IOException { 
	try {	
		if (sd.canWrite() == true){
			//do Nothing
		}else{sd.mkdirs();}
			
			File currentDB = new File(DataDir,  dbase);
			File backupDB = new File(sd,  dbase);
			FileChannel	src = new FileInputStream(currentDB).getChannel();
			FileChannel	dst = new FileOutputStream(backupDB).getChannel();
			dst.transferFrom(src, 0, src.size());
			response = dbase + " Saved to SD Card";
			
			} catch (IOException e) {
				
				response = dbase + " Save Failed";
			}
				
			
			return response;

		  	 		};
 

		  	 		

public String  restoreDB(String dbase, Context ctx) throws IOException {
	String result = "";
	try {

		
		if (sd.canWrite()) {
		File currentDB = new File(DataDir, dbase);
		File SDsrc = new File(sd, dbase);
		if (SDsrc.exists()== true) {
		FileChannel src1 = new FileInputStream(SDsrc).getChannel();
		FileChannel dst1 = new FileOutputStream(currentDB).getChannel();
		dst1.transferFrom(src1, 0, src1.size());
		src1.close();
		dst1.close();
		result=dbase + " Restored";
		}}

		} catch (Exception e) {
			result= dbase + " Restore failed";
		}
	return result;

}

public String  restoreDBUpload(String dbase, Context ctx) throws IOException {
	String result = "";
	try {

		File sd1 = new File(Environment.getExternalStorageDirectory().toString() + "/PocketCalDatabasesUpload/");
		File DataDir1 = new File(Environment.getDataDirectory().toString() + "/data/com.yctc.alpaware/databases/");
		if (sd.canWrite()) {
		File currentDB = new File(DataDir1, dbase);
		File SDsrc = new File(sd1, dbase);
		if (SDsrc.exists()== true) {
		FileChannel src1 = new FileInputStream(SDsrc).getChannel();
		FileChannel dst1 = new FileOutputStream(currentDB).getChannel();
		dst1.transferFrom(src1, 0, src1.size());
		src1.close();
		dst1.close();
		result=dbase + " Restored";
		}}

		} catch (Exception e) {
			result= dbase + " Restore failed";
		}
	return result;

}
public void showaction(String msg, Context ctx){
	
	int duration = Toast.LENGTH_SHORT;

	Toast toast = Toast.makeText(ctx, msg, duration);
	toast.show();
	}	


public String installDB(String dbase, Context ctx){    
	// install files to system if they don't already exist
	
	String result = " ";
			if( dbase.matches("PocketCal.db")){
				try {
					InputStream in = ctx.getResources().getAssets().open("PocketCal.db");
					OutputStream out = new FileOutputStream(DataDir  + "/PocketCal.db"); 
					byte[] buf = new byte[1024]; 
		         	int len; 
		         	while ((len = in.read(buf)) > 0)
		         	{ out.write(buf, 0, len); 	}
		         	 in.close(); 
					  out.flush();
			          out.close(); 
			         
			        result = "PocketCal DB Installed";
			          
			          
				} catch (IOException e) {
					
					 result = " Install Failed";
					e.printStackTrace();} 
		         	
					
				
			}else{
				
				
			
	 
			try {
				
				InputStream in = ctx.getResources().getAssets().open(dbase);
				OutputStream out = new FileOutputStream(DataDir + "/" + dbase); 
				byte[] buf = new byte[1024]; 
	         	int len; 
	         	while ((len = in.read(buf)) > 0)
	         	{ out.write(buf, 0, len); 	}
	         	 in.close(); 
				  out.flush();
		          out.close(); 
		         
		       result =  dbase + " Installed"; 
		          
			} catch (IOException e) {
				  result = dbase +  " Install Failed";
				e.printStackTrace();} 
	         	
			}
			return result;}


// HTTPS handlers
public String NewinstallDB(String dbase, Context ctx){    
	// install files to system if they don't already exist
	
	String result = "";
	try {

		
		if (sd.canWrite()) {
		File currentDB = new File(DataDir, dbase);
		File SDsrc = new File(sd, dbase);
		if (SDsrc.exists()== true) {
		FileChannel src1 = new FileInputStream(SDsrc).getChannel();
		FileChannel dst1 = new FileOutputStream(currentDB).getChannel();
		dst1.transferFrom(src1, 0, src1.size());
		src1.close();
		dst1.close();
		result=dbase + " Installed";
		}}

		} catch (Exception e) {
			result= dbase + " Restore failed";
		}
	return result;}




public String readEGRID(Bitmap bm){
	File myDir = new File(Environment.getExternalStorageDirectory().toString() + "/tessdata/");

	
	
	TessBaseAPI baseApi = new TessBaseAPI();
	baseApi.init(myDir.toString(), "eng"); // myDir + "/tessdata/eng.traineddata" must be present
	

	
	baseApi.setVariable("tessedit_char_whitelist","ABCDEFGHIJ12345,[]");
	baseApi.setVariable("tessedit_char_blacklist","KLMNOPQRSTUVWXYZ|={}()-_");
	baseApi.setVariable("textord_min_linesize", "1.5");
	baseApi.setVariable("language_model_penalty_non_freq_dict_word", ".11");
	
	
	
	Config frmt = bm.getConfig();
	
	if (frmt.toString() != "ARGB_8888"){
	Bitmap ARGB = JPEGtoRGB888(bm); 
	
	baseApi.setImage(ARGB);
	
	
	String recognizedText = baseApi.getUTF8Text(); // Log or otherwise display this string...
	baseApi.end();
	

	
	String EgridCode = decodeEgrid(recognizedText);
		
	return EgridCode;
	

	
	
	
	}else{
		
		baseApi.setImage(bm);
		
		
		String recognizedText = baseApi.getUTF8Text(); // Log or otherwise display this string...
		baseApi.end();
		//String[] egridpairs = recognizedText.split(" ");

		
		String EgridCode = decodeEgrid(recognizedText);
			
		return EgridCode;
		
	}

	
	

}

public Bitmap JPEGtoRGB888(Bitmap img)
{
        int numPixels = img.getWidth()* img.getHeight();
        int[] pixels = new int[numPixels];

    //Get JPEG pixels.  Each int is the color values for onepixel.
        img.getPixels(pixels, 0, img.getWidth(), 0, 0, img.getWidth(),
img.getHeight());

    //Create a Bitmap of the appropriate format.
    Bitmap result = Bitmap.createBitmap(img.getWidth(),
img.getHeight(), Config.ARGB_8888);

    //Set RGB pixels.
    result.setPixels(pixels, 0, result.getWidth(), 0, 0,
result.getWidth(), result.getHeight());
    return result;
} 
public String convertBM(Bitmap bitmap) {
	

	
	
	
	// for test read egrid from sd card
  Bitmap newBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Config.ARGB_8888);
  int BWlvl = 1020;
    // replace all pixel with red value less than 200 with white and > 200 with black
    // then OCR the image.
  				newBitmap.setDensity(400);
  				String[][] pxdata = new String[bitmap.getWidth()][bitmap.getHeight()];
				for (int x = 0;x<bitmap.getWidth();x++){
					for (int y = 0;y < bitmap.getHeight() ;y++){
				int colorR = bitmap.getPixel(x, y);
					int Red = Color.red(colorR);
					int Green = Color.green(colorR);
					int Blue = Color.blue(colorR);
					
					pxdata[x][y] = Red+","+Green+","+Blue;
				    double score = (Red*2.5) + (Green * 2) + (Blue * .5);
					     if (score < BWlvl){
							newBitmap.setPixel(x, y, Color.WHITE);
						    }else{
							newBitmap.setPixel(x, y, Color.BLACK);
						}
					   }
					
					
				}
				
	
				
				//saveBoxImage(newBitmap,"newBitmap_pre.jpg");
				
				
	             //  Bitmap fbm = setPixelMedian(newBitmap);
				int w = newBitmap.getWidth();
				int h = newBitmap.getHeight();  
				 
				ReduceNoiseFilter rn = new ReduceNoiseFilter();
				SharpenFilter sf = new SharpenFilter();
				DespeckleFilter ds = new DespeckleFilter();
				
				
				int[] src1 = AndroidUtils.bitmapToIntArray(newBitmap);
				int[] rednoise = rn.filter(src1, w, h);
				int [] sharp = sf.filter(rednoise, w, h);
				int [] despek = ds.filter(sharp, w, h);
				
				
				
				Bitmap newBitmap_rn = Bitmap.createBitmap(despek, w, h, Config.ARGB_8888);
				Bitmap scaled = Bitmap.createScaledBitmap(newBitmap_rn,340, 100, true);
				
				
                //
		//	Calendar c = Calendar.getInstance(); 
		//		int seconds = c.get(Calendar.SECOND);
				//saveBoxImage(newBitmap_rn,"bitmapRN" + seconds +".jpg");
			
				
			String EgridText = readEGRID(scaled);
				newBitmap_rn.recycle();
				scaled.recycle();
			//	scaled.recycle();
				return EgridText;

	
}

public String saveBoxImage(Bitmap bm, String filename){
	
	// save b&W image to sd card 
	
	File myDir = new File(Environment.getExternalStorageDirectory().toString() + "/tessdata/");
	if (myDir.canWrite() == true){
		//do Nothing
	}else{sd.mkdirs();}
	
File EgridImg = new File(myDir,  filename);
		 FileOutputStream fos = null;
	     try {
	         fos = new FileOutputStream(EgridImg);
	         bm.compress(Bitmap.CompressFormat.JPEG,100, fos);

	         fos.flush();
	         fos.close();
	         response = "Image Saved";
	      
	     }catch (FileNotFoundException e) {

	     } catch (Exception e) {

	     }
	     
	     return response;

		  	 		};
		  	 		
		  	 	
public String readBotCode(Bitmap bm){
	
		  	 			File myDir = new File(Environment.getExternalStorageDirectory().toString() + "/tessdata/");
		  	 			Bitmap BM =JPEGtoRGB888(bm);
		  	 			TessBaseAPI baseApi = new TessBaseAPI();
		  	 			baseApi.init(myDir.toString(), "eng"); // myDir + "/tessdata/eng.traineddata" must be present
		  	 			
		  	 			baseApi.setVariable("tessedit_char_whitelist","1234567890");
		  	 			baseApi.setPageSegMode(10); // sets recognise character only mode!
		  	 			baseApi.setImage(BM);
		  	 			
		  	 			String recognizedText = baseApi.getUTF8Text(); // Log or otherwise display this string...
		  	 			baseApi.end();
		  	 			
		  	 			return recognizedText;
		  	 			
		  	 			

} 					
 public String decodeEgrid(String result){
	 

	 StringBuffer CstrBuff = new StringBuffer();
	
	
		char c;
		
		for (int i = 0; i < result.length() ; i++) {
		    c = result.charAt(i);
		    
		    // search for the first Letter. Pattern is ANANAN

		    if  (Character.isJavaLetter(c)) {
		        CstrBuff.append(c);
		    }else{
		    	 if  (Character.isDigit(c)) {
		        CstrBuff.append(c); }
		    }
		}
		
	
		
		
		String code = CstrBuff.toString();
		code = CstrBuff.substring(0, 2);
		code = code + " ";
		code = code + CstrBuff.substring(2,4);
		code = code + " ";
		code = code + CstrBuff.substring(4, 6);
		
		
		return code;
		
 }
 
	
}// end of class
