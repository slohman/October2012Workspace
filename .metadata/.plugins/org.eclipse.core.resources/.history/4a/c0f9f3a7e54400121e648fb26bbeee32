package com.yctc.alpaware;



import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.CookieStore;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Toast;
import android.widget.EditText;
import android.widget.Spinner;


public class OpenTimeR extends Activity {




	
	 CookieStore cookieStore = new BasicCookieStore();
	 HttpContext localContext = new BasicHttpContext();
	 utilities util = new utilities();
	 HttpEntity tripDetailEntity;
	 String tripDetails,grid,uid,pwd,base,equip,Month,stDate,enDate,seat,sessId,redirect,ImagePath;
	 Context ctx= OpenTimeR.this;
	 ProgressDialog pd;
	String[] botlinks;
	String nCTL = null;  // bot code holder
	DefaultHttpClient httpClient = AppSettings.getClient();
	
	



	 @Override
	    public void onCreate(Bundle Icicle) {
		 super.onCreate(Icicle);
	     setContentView(R.layout.opentimer);
	     
	       //get bundle and read grid code
	       Bundle b = this.getIntent().getExtras();  
	        grid  = b.getString("grd");
	         uid = b.getString("id");
  	        pwd = b.getString("pw");
  	        sessId = b.getString("sesID");
  	        redirect="https://pilot.fedex.com";
  	        ImagePath = b.getString("ip");
  	        
  	       // get the other values from the spinners
  	        
  	      
          loadspinners(); // put basic data into spinners
 	
  	        
          Button stopOTUpdate = (Button) findViewById(R.id.btnStopOTSvc);
          stopOTUpdate.setOnClickListener(new View.OnClickListener() {
           	public void onClick(View view) {
           		
           		
           	 Intent intent = new Intent(OpenTimeR.this, com.yctc.alpaware.OTUpdateSvc.class);
             OpenTimeR.this.stopService(intent);
           		
           	}});
           		//Intent OTIntent = new Intent(ctx, OTReciever.class); // intent to be launched
           	//	 PendingIntent pendingIntent = PendingIntent.getBroadcast( ctx,  0, OTIntent,  PendingIntent.FLAG_UPDATE_CURRENT); // PendintIntent flag
       //    	 AlarmManager alarms = (AlarmManager) ctx.getSystemService(Context.ALARM_SERVICE);
           	
        //   	 alarms.cancel(pendingIntent);
       //    	Intent myIntent1 = new Intent(getBaseContext(), PocketCal20.class);
		//	startActivityForResult(myIntent1, 0);}});
  	     
      /////////////////////////////////////////////////////////////////////////////////////////////////////////    
          
          Button startOTUpdate = (Button) findViewById(R.id.btnStartOTSvc);
          startOTUpdate.setOnClickListener(new View.OnClickListener() {
           	public void onClick(View view) {
           
           	  String[] srchDates =  getSpinnerDates();
              String startDate = srchDates[0];
   	          String endDate = srchDates[1];
           	 // String[] Data = null;
           	  
           	  
           	  Spinner spbase = (Spinner)findViewById(R.id.spinnerBase);
              Spinner spequip = (Spinner)findViewById(R.id.spinnerequip);
              Spinner spseat = (Spinner)findViewById(R.id.spinnerseat);
              EditText updsec = (EditText)findViewById(R.id.teUpdateSeconds);
              String sUpdateSec = updsec.getText().toString();
              final int updatesec = Integer.parseInt(sUpdateSec);
           	  
   
     	      // make bundle of data to pass to OpenTImeR.java which will run OTReceiver via Alarm Manager
           	  
          
           	  
           	  
           	  // START A SESSION HERE SO THAT THE OTReciever class won't keep starting the session!
           	  
      //     	boolean alarmUp = (PendingIntent.getBroadcast(ctx, 0, 
        //   	        new Intent("OTIntent"), 
     //      	        PendingIntent.FLAG_NO_CREATE) != null);
           	  
   //       if (! alarmUp){
        	  
    //    	 String loginResult = startSession(uid, grid);
         
    //       	 if (loginResult != "login failed") { // launch repeating update service
           	 //send data to list which will run he long op, parse the data  and load the listview with open time
          	
		//		 Date when = new Date(System.currentTimeMillis());
				 
				 long seconds=updatesec*1000; // milliseconds of interval time
				

				 try{
					 
					  Bundle bun = new Bundle();
					  bun.putString("UID", uid);
					  bun.putString("PWD", pwd);
					  bun.putString("GRID", grid);
					  bun.putString("BASE", spbase.getSelectedItem().toString());
					  bun.putString("EQUIP", spequip.getSelectedItem().toString());
					  bun.putString("SEAT", spseat.getSelectedItem().toString());
					  bun.putString("StartDate", startDate);
					  bun.putString("EndDate", endDate);
					  bun.putInt("UPDATESEC", updatesec);
					  bun.putString("SESSID", sessId);
					  bun.putString("IP", ImagePath);
					  bun.putString("REDIRECT", redirect);
					 
					  Intent intent = new Intent("com.yctc.alpaware.OTUpdateSvc");
					  intent.putExtras(bun);
			          startService(intent);
					 
				//	  Intent OTIntent = new Intent(ctx, OTReciever.class); // intent to be launched
				 //     OTIntent.putExtras(bun);
				 //    note this could be getActivity if you want to launch an activity
				  //    PendingIntent pendingIntent = PendingIntent.getBroadcast( ctx,  0, OTIntent,  PendingIntent.FLAG_UPDATE_CURRENT); // PendintIntent flag
				 //     AlarmManager alarms = (AlarmManager) ctx.getSystemService(Context.ALARM_SERVICE);
				  //    alarms.setRepeating(AlarmManager.RTC_WAKEUP, when.getTime(), seconds, pendingIntent); 
						 
					 

				 }catch(Exception e){
				    e.printStackTrace();
				 }
           	
           		
         
           	}});
  	        
  	      
  	     
  	  
	 	 		    
	 	 		      
	 }
	 
	 public void loadspinners(){
		 
		  Spinner basespinner = (Spinner) findViewById(R.id.spinnerBase);
		    ArrayAdapter<?> adapter1 = ArrayAdapter.createFromResource(
		            this, R.array.Base, android.R.layout.simple_spinner_item);
		    adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		    basespinner.setAdapter(adapter1);
		    
		    Spinner equipspinner = (Spinner) findViewById(R.id.spinnerequip);
		    ArrayAdapter<?> adapter = ArrayAdapter.createFromResource(
		            this, R.array.equip, android.R.layout.simple_spinner_item);
		    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		    equipspinner.setAdapter(adapter);	 
		   
		    Spinner seatspinner = (Spinner) findViewById(R.id.spinnerseat);
		    ArrayAdapter<?> adapter2 = ArrayAdapter.createFromResource( this, R.array.seat, android.R.layout.simple_spinner_item);
		    adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		    seatspinner.setAdapter(adapter2);	
		    
		 
	 }
	 
	 public String[] getSpinnerDates(){
		
		 String[] spinDates = null;
		 EditText df = (EditText)findViewById(R.id.etDaysToSearch);
		 int days = Integer.parseInt(df.getText().toString());
	
		    SimpleDateFormat sdf = new SimpleDateFormat("ddMMMyy");
		    Calendar c = Calendar.getInstance();
		    String startdate = sdf.format(c.getTime());
		    
		    
		    c.setTime(c.getTime());
			c.add(Calendar.DATE, days);  // number of days to add, can also use Calendar.DAY_OF_MONTH in place of Calendar.DATE
			SimpleDateFormat sdf1 = new SimpleDateFormat("ddMMMyy");
			String output = sdf1.format(c.getTime()); 
   
   
   spinDates  = new String[2];
   spinDates[0] = startdate;
   spinDates[1] = output;
   return spinDates;
		   
		 
		
	 }
	 
	 public String startSession(String UID, String GRID){
	    	
	   	 try {
	   	//	 DefaultHttpClient httpClient = AppSettings.getClient();
	   		 
	   		  
	   	       HttpPost httpPost = new HttpPost("https://pilot.fedex.com/TwoFactorAuthentication/AuthenticationController/secondfactor");
	   		    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(5);

	   		    nameValuePairs.add(new BasicNameValuePair("userId", UID));
	   		    nameValuePairs.add(new BasicNameValuePair("imagePath", ImagePath));
	   		    nameValuePairs.add(new BasicNameValuePair("redirectPath",redirect));
	   		    nameValuePairs.add(new BasicNameValuePair("sessionID", sessId));
	   		    nameValuePairs.add(new BasicNameValuePair("gridResponse", GRID));
	   		    // Encode the entities to UTF-8
	   		    httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, "UTF-8"));
	   		    // Response from the Http Request
	   		    
	   			
	   		    HttpResponse response1 = httpClient.execute(httpPost);
	   		    localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
	   	       HttpEntity resEntity1 = response1.getEntity();
	   	       String data =  EntityUtils.toString(resEntity1);
	   	       resEntity1.consumeContent();
	   	       
	   	    
	   	     if (data.contains("SSO Login")){
	   	    	 String errmsg = "login failed";
	   	    	 return errmsg;
	   	    	 
	   	     }else{
	   	
	   	return data;}
	   	
	   	
	   	
	   	
	   	 } catch (IOException e) {
	            Log.e("Exception", "IOException", e);
	      } catch (Exception e) {
	            Log.e("Exception", "General Exception", e);
	     }

	   return null;
	   }

} // end Open Time ACtivity

