
package com.yctc.alpaware;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.CookieStore;

import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;



import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;

import android.util.Log;
import android.webkit.CookieManager;
import android.webkit.CookieSyncManager;
import android.widget.Toast;






public class OTReciever  extends BroadcastReceiver{
 
	 CookieStore cookieStore = new BasicCookieStore();
	 HttpContext localContext = new BasicHttpContext();
	 utilities util = new utilities();
	 HttpEntity tripDetailEntity;
	 String tripDetails,grid,uid,pwd,base,equip,Month,stDate,enDate,seat,sessId,redirect,ImagePath;
	 
	
	String[] botlinks;
	String nCTL = null;  // bot code holder
	//DefaultHttpClient httpClient = AppSettings.getClient();
	Context ctx;
	
    @Override
   
    public void onReceive(Context context, Intent intent) 
    {
    	 
	       grid = intent.getStringExtra("GRID");
	       uid = intent.getStringExtra("UID");
	       pwd = intent.getStringExtra("PWD");
	       base = intent.getStringExtra("BASE");
	       equip = intent.getStringExtra("EQUIP");
	       seat = intent.getStringExtra("SEAT");
	       stDate = intent.getStringExtra("StartDate");
	       enDate = intent.getStringExtra("EndDate");
	       ImagePath = intent.getStringExtra("IP");
	       redirect = intent.getStringExtra("REDIRECT");
	       sessId = intent.getStringExtra("SESSID");
	       ctx = context;
	       
	       
	      
    	
	       
	          String [] Data = new String[8];
	          Data[0] = uid;
        	  Data[1] = pwd;
        	  Data[2] = grid;
        	  Data[3] = base;
        	  Data[4] = equip;
        	  Data[5] = seat;
        	  Data[6] = stDate;
        	  Data[7] = enDate;
        	  
        	  
        	 
        	  
        	
        	String OTDataString = loginDirectGetOpenTime(Data);
        	//   OpenTime ot = new OpenTime();
        	//   ot.storeOpenTime(OTDataString);
			 
        	  Toast.makeText(context,OTDataString,Toast.LENGTH_LONG).show(); 
        	   
        	   
        	   
        	   
        	
    	
	     //  new getOpenTime().execute(Data);
   
    
    
    
	       
        	  }
    
    
    
    
  
    
   
    public String loginDirectGetOpenTime(String[] Data) {
		


		 try { 
			 
			
			 
			
			DefaultHttpClient httpClient = AppSettings.getClient();

				Cookie sessionInfo;
				List<Cookie> cookies = httpClient.getCookieStore().getCookies();

				if (! cookies.isEmpty()){
				        CookieSyncManager.createInstance(ctx);
				        CookieManager cookieManager = CookieManager.getInstance();

				        for(Cookie cookie : cookies){
		        	
				        	   sessionInfo = cookie;
				                String cookieString = sessionInfo.getName() + "=" + sessionInfo.getValue() + "; domain=" + sessionInfo.getDomain();
				                cookieManager.setCookie("pilot.fedex.com", cookieString);
				                CookieSyncManager.getInstance().sync();
				        }
				}

         
        // change to get open time string
				
				   
			        HttpPost httpPost = new HttpPost("https://pilot.fedex.com/vips-bin/vipscgi?webdd");
				    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(9);

				    nameValuePairs.add(new BasicNameValuePair("n001", Data[3]));// base
				    nameValuePairs.add(new BasicNameValuePair("n002", Data[4])); //equip
				    nameValuePairs.add(new BasicNameValuePair("n003",Data[5])); //seat
				    nameValuePairs.add(new BasicNameValuePair("n004", Data[6])); // start date
				    nameValuePairs.add(new BasicNameValuePair("n005", Data[7])); //end date
				    nameValuePairs.add(new BasicNameValuePair("n006", "Open Time Only")); 
				    nameValuePairs.add(new BasicNameValuePair("n007", "on"));
				    
				    
				    
				    // Encode the entities to UTF-8
				    httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, "UTF-8"));
				    // Response from the Http Request
				    
					
				    HttpResponse response1 = httpClient.execute(httpPost);
				    localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
			       HttpEntity resEntity1 = response1.getEntity();
			       String data =  EntityUtils.toString(resEntity1);
			       resEntity1.consumeContent();	
			       
			       // check for bot and repost if necessary
			      OpenTime ot = new OpenTime();
			      
			      String src = "otrq";
			      String botCode = ot.Botchecker(data,src);
			       if (botCode != null){
			    	   
			    	   // get bot code
			    	 
					


				        HttpPost httpPost1 = new HttpPost("https://pilot.fedex.com/vips-bin/vipscgi?webdd");
					    List<NameValuePair> nameValuePairs1 = new ArrayList<NameValuePair>(10);

					    nameValuePairs1.add(new BasicNameValuePair("n001", Data[3]));// base
					    nameValuePairs1.add(new BasicNameValuePair("n002", Data[4])); //equip
					    nameValuePairs1.add(new BasicNameValuePair("n003", Data[5])); //seat
					    nameValuePairs1.add(new BasicNameValuePair("n004", Data[6])); // start date
					    nameValuePairs1.add(new BasicNameValuePair("n005", Data[7])); //end date
					    nameValuePairs1.add(new BasicNameValuePair("n006", "Open Time Only")); 
					    nameValuePairs1.add(new BasicNameValuePair("n007", "on"));
					    nameValuePairs1.add(new BasicNameValuePair("nCTL", botCode.toString()));	
					    nameValuePairs1.add(new BasicNameValuePair("nTRN", "webdd   "));
					    nameValuePairs1.add(new BasicNameValuePair("n999", " Submit "));
					    
			    	  
			    	   httpPost1.setEntity(new UrlEncodedFormEntity(nameValuePairs1, "UTF-8"));
					    HttpResponse response2 = httpClient.execute(httpPost1);
					    localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
				       HttpEntity resEntity2 = response2.getEntity();
				       String data2 =  EntityUtils.toString(resEntity2);
				       resEntity2.consumeContent();	
			    	   
			    	
			    	return data2;
			    	 
			    	   
			    	 }else{
			    		 
			    		 //no bot blocker
			    		 
			    		 return data;
			    	 }
		
	 
	      } catch (IOException e) {
	            Log.e("Exception", "IOException", e);
	      } catch (Exception e) {
	            Log.e("Exception", "General Exception", e);
	     }
		 
	 
	 return null;
	
}
  
}
