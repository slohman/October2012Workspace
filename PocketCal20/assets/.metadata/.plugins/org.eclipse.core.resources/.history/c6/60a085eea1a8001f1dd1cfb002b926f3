package com.yctc.alpaware;

import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ListAdapter;
import android.widget.SimpleCursorAdapter;

public class explogmaint extends Activity{
	private static final int NOTIFY_USER=1337;
	private Timer timer=new Timer();
	private int count=0;
	String sMsg;
	
	
	
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.explogmaint);
        
        
       
	
	
	Button emailfltlog = (Button) findViewById(R.id.emailexpdata);
	emailfltlog.setOnClickListener(new View.OnClickListener() {
    	public void onClick(View view) {
    		String email = (String) "";
    		Intent sendIntent = new Intent(Intent.ACTION_SEND);
    		sendIntent.putExtra(Intent.EXTRA_SUBJECT, "Copy of EXPlog DB");
    		String[] recipients = new String[]{email};
    		sendIntent.putExtra(android.content.Intent.EXTRA_EMAIL, recipients);
    		
    		sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse
       		("file://"+ Environment.getDataDirectory()+"data/com.yctc.alpaware/databses/EXPDATA.db"));
    		sendIntent.setType("plain/text"); 
    		startActivity(Intent.createChooser(sendIntent, "Send Mail ....")); 
    	}});
	
	Button binternal = (Button) findViewById(R.id.CopyEDInternal);
	binternal.setOnClickListener(new View.OnClickListener() {
    	public void onClick(View view) {
    		
    		
    		 //Creates internal database from assets
    		 
    		 
    		 TimerTask task =new TimerTask(){
 				public void run(){
 					sMsg="ExpLog Database Created";
 				notifyuser(sMsg);}};
 			timer.schedule(task, 1000);
 			
 			try {
				copy();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}}); 
	
     Button bCopySD = (Button) findViewById(R.id.sdcopyExp);
	bCopySD.setOnClickListener(new View.OnClickListener() {
    	public void onClick(View view) {
    		    		 
    		 TimerTask task =new TimerTask(){
 				public void run(){
 					
 				
 			}
 			};
 			timer.schedule(task, 1000);
 			
 			try {
				copysd();
				sMsg="File copied to SDCard";
				notifyuser(sMsg);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}});  
	
	 Button bCopyInSD = (Button) findViewById(R.id.sdcopyinExp);
		bCopyInSD.setOnClickListener(new View.OnClickListener() {
	    	public void onClick(View view) {
	    		    		 
	    		 TimerTask task =new TimerTask(){
	 				public void run(){
	 					
	 				
	 			}
	 			};
	 			timer.schedule(task, 1000);
	 			
	 			try {
					copysdin();
					sMsg="File copied to SDCard";
					notifyuser(sMsg);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    	}});  
	
	 Button bCopyCSV = (Button) findViewById(R.id.sendcsvexp);
		bCopyCSV.setOnClickListener(new View.OnClickListener() {
	    	public void onClick(View view) {
	    		    		 
	    		 TimerTask task =new TimerTask(){
	 				public void run(){
	 					sMsg="CSV file emailed";
	 				notifyuser(sMsg);
	 			}
	 			};
	 			timer.schedule(task, 1000);
	 			
	 			try {
					sendcsv();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				notifyuser(sMsg);
	    	}}); } 
			
	
 
        
        private void notifyuser(String sMsg){
    		final NotificationManager mgr = 
    			(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
    		Notification note = new Notification(R.drawable.alpalogo,
                	"Pocket Cal Action", System.currentTimeMillis());
    		
    		PendingIntent i=
    			PendingIntent.getActivity(this, 0, new Intent(this,Notification.class), 0);
              note.setLatestEventInfo(this, "Pocket Cal Action", sMsg, i);
              note.number=++count;
            mgr.notify(NOTIFY_USER, note);
            
        }      
            
            void copy() throws IOException { 
            	
            	InputStream in = getResources().getAssets().open("EXPDATA.db"); 
            	OutputStream out = new FileOutputStream("/data/data/com.yctc.alpaware/databases/EXPDATA.db"); // Transfer bytes from in to out
            	byte[] buf = new byte[1024]; 
            	int len; 
            	while ((len = in.read(buf)) > 0)
            	{ out.write(buf, 0, len); 
            	} in.close(); 
            	out.close(); 
            	}
            
            
void copysd() throws IOException {
            	
            	try {

            		File sd = Environment.getExternalStorageDirectory();

            		File data = Environment.getDataDirectory();

            		if (sd.canWrite()) {

            		String currentDBPath = "/data/com.yctc.alpaware/databases/EXPDATA.db";

            		String backupDBPath = "/fltlogdata/EXPDATA.db";

            		File currentDB = new File(data, currentDBPath);

            		File backupDB = new File(sd, backupDBPath);

            		if (currentDB.exists()) {

            		FileChannel src = new FileInputStream(currentDB).getChannel();

            		FileChannel dst = new FileOutputStream(backupDB).getChannel();

            		dst.transferFrom(src, 0, src.size());

            		src.close();

            		dst.close();

            		}}

            		} catch (Exception e) {}
}
            void copysdin() throws IOException {
            	
            	try {

            		File sd = Environment.getExternalStorageDirectory();

            		File data = Environment.getDataDirectory();

            		if (sd.canWrite()) {

            		String currentDBPath = "/data/com.yctc.alpaware/databases/EXPDATA.db";

            		String backupDBPath = "/fltlogdata/EXPDATA.db";

            		File currentDB = new File(data, currentDBPath);

            		File SDsrc = new File(sd, backupDBPath);

            		if (currentDB.exists()) {

            		FileChannel src1 = new FileInputStream(SDsrc).getChannel();

            		FileChannel dst1 = new FileOutputStream(currentDB).getChannel();

            		dst1.transferFrom(src1, 0, src1.size());

            		src1.close();

            		dst1.close();

            		}}

            		} catch (Exception e) {}
            
}
        public void sendcsv()throws IOException {
        //select all databse records then build SD file
        	String fltdata;
        	
        	
        	FltlogHelper mdbh = new FltlogHelper(this.getApplicationContext());
   	        final SQLiteDatabase db = mdbh.getWritableDatabase(); 
   	       
   	      
   	      
   	     
   	 		final Cursor c = db.rawQuery("Select  * from EXP  order by Date ASC" ,null);		  
   	 		startManagingCursor(c);
   	 		c.moveToFirst();
   	 		fltdata="_id,Date,Amount,Catagory,Comments" + "\r\n";
   	 	for (int i = 0; i <= c.getCount() - 1;i++) {
   	 		 fltdata=fltdata + c.getString(c.getColumnIndex("_id")) + "," +
   	 		c.getString(c.getColumnIndex("exp_Date")) +  "," +
   	 	    c.getString(c.getColumnIndex("exp_AMOUNT")) +  "," +
   	 	    c.getString(c.getColumnIndex("exp_CAT")) +  "," +
   	 	    c.getString(c.getColumnIndex("exp_COMM"))  + "\r\n"; 		
   	 		
   	 	}	
   	 try {
   	    File root = Environment.getExternalStorageDirectory();
   	    if (root.canWrite()){
   	        File csvfile = new File(root, "explog.csv");
   	        FileWriter gpxwriter = new FileWriter(csvfile);
   	        BufferedWriter out = new BufferedWriter(gpxwriter);
   	        out.write(fltdata);
   	        out.close();
   	    }
   	} catch (IOException e) {
   	    Log.e("file", "Could not write file " + e.getMessage());
   	}
   	String email = (String) "";
	Intent sendIntent = new Intent(Intent.ACTION_SEND);
	sendIntent.putExtra(Intent.EXTRA_SUBJECT, "Copy of Explog DB");
	String[] recipients = new String[]{email};
	sendIntent.putExtra(android.content.Intent.EXTRA_EMAIL, recipients);
	
	sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse
		("file://"+ Environment.getExternalStorageDirectory()+"/explog.csv"));
	sendIntent.setType("plain/text"); 
	startActivity(Intent.createChooser(sendIntent, "Send Mail ...."));
        }
        }
